#!/usr/bin/env bash

if ! [ -x "$(command -v tput)" ]; then
	echo "tput not found. Install ncurses-utils!"
	exit 1
fi

if ! [ -x "$(command -v pygmentize)" ]; then
	echo "Pygmentize not found. Install with \`# pip install pygments\`!"
	exit 1
fi

# Cursor positions

## UP, DOWN, LEFT AND RIGHT

moveup() {
	printf "\033[${1}A"
}

movedown() {
	printf "\033[${1}B"
}

moveleft() {
	printf "\033[${1}D"
}

moveright() {
	printf "\033[${1}C"
}

## SCREEN CLEARING

cleanmove() {
	printf "\033[2J"
}

erasetoend() {
	printf "\033[K"
}

eraseline() {
	printf "\033[2K"
}

eraseprev() {
	moveup 1
	eraseline
}

## CURSOR POSITION

savepos() {
	printf "\033[s"
}

loadpos() {
	printf "\033[u"
}

## FUNCTIONS

setupcolors() {
	if test -t 1; then

		# see if it supports colors...
		ncolors=$(tput colors)

		if test -n "$ncolors" && test $ncolors -ge 8; then
			COLORS_SUPPORTED=1

			bold="$(tput bold)"
			underline="$(tput smul)"
			standout="$(tput smso)"
			normal="$(tput sgr0)"
			black="$(tput setaf 0)"
			red="$(tput setaf 1)"
			green="$(tput setaf 2)"
			yellow="$(tput setaf 3)"
			blue="$(tput setaf 4)"
			magenta="$(tput setaf 5)"
			cyan="$(tput setaf 6)"
			white="$(tput setaf 7)"
		fi
	fi
}

### This is a huge one

printbanner() {
	random=`shuf -i 1-3 -n 1`

	case $random in
1)
	echo '
$$$$$$$\   $$$$$$\   $$$$$$\ $$$$$$$$\ $$$$$$$\   $$$$$$\   $$$$$$\  $$\   $$\
$$  __$$\ $$  __$$\ $$  __$$\\__$$  __|$$  __$$\ $$  __$$\ $$  __$$\ $$ |  $$ |
$$ |  $$ |$$ /  $$ |$$ /  \__|  $$ |   $$ |  $$ |$$ /  $$ |$$ /  \__|$$ |  $$ |
$$$$$$$  |$$ |  $$ |\$$$$$$\    $$ |   $$$$$$$\ |$$$$$$$$ |\$$$$$$\  $$$$$$$$ |
$$  ____/ $$ |  $$ | \____$$\   $$ |   $$  __$$\ $$  __$$ | \____$$\ $$  __$$ |
$$ |      $$ |  $$ |$$\   $$ |  $$ |   $$ |  $$ |$$ |  $$ |$$\   $$ |$$ |  $$ |
$$ |       $$$$$$  |\$$$$$$  |  $$ |   $$$$$$$  |$$ |  $$ |\$$$$$$  |$$ |  $$ |
\__|       \______/  \______/   \__|   \_______/ \__|  \__| \______/ \__|  \__|

' ; ;;

2)
	echo '
 ██▓███   ▒█████    ██████ ▄▄▄█████▓ ▄▄▄▄    ▄▄▄        ██████  ██░ ██
▓██░  ██▒▒██▒  ██▒▒██    ▒ ▓  ██▒ ▓▒▓█████▄ ▒████▄    ▒██    ▒ ▓██░ ██▒
▓██░ ██▓▒▒██░  ██▒░ ▓██▄   ▒ ▓██░ ▒░▒██▒ ▄██▒██  ▀█▄  ░ ▓██▄   ▒██▀▀██░
▒██▄█▓▒ ▒▒██   ██░  ▒   ██▒░ ▓██▓ ░ ▒██░█▀  ░██▄▄▄▄██   ▒   ██▒░▓█ ░██
▒██▒ ░  ░░ ████▓▒░▒██████▒▒  ▒██▒ ░ ░▓█  ▀█▓ ▓█   ▓██▒▒██████▒▒░▓█▒░██▓
▒▓▒░ ░  ░░ ▒░▒░▒░ ▒ ▒▓▒ ▒ ░  ▒ ░░   ░▒▓███▀▒ ▒▒   ▓▒█░▒ ▒▓▒ ▒ ░ ▒ ░░▒░▒
░▒ ░       ░ ▒ ▒░ ░ ░▒  ░ ░    ░    ▒░▒   ░   ▒   ▒▒ ░░ ░▒  ░ ░ ▒ ░▒░ ░
░░       ░ ░ ░ ▒  ░  ░  ░    ░       ░    ░   ░   ▒   ░  ░  ░   ░  ░░ ░
             ░ ░        ░            ░            ░  ░      ░   ░  ░  ░
                                          ░
' ; ;;

3)

	echo '

_________________________________________________________  __
___  __ \_  __ \_  ___/__  __/__  __ )__    |_  ___/__  / / /
__  /_/ /  / / /____ \__  /  __  __  |_  /| |____ \__  /_/ / 
_  ____// /_/ /____/ /_  /   _  /_/ /_  ___ |___/ /_  __  /  
/_/     \____/ /____/ /_/    /_____/ /_/  |_/____/ /_/ /_/   

' ; ;;

	esac

	echo "Created by ${red}xSlendiX${normal}"
	echo
}

tabs=()

createtab() {
	local URL="http://localhost:8080"
	local METHOD="GET"

	read -e -p "${red}Enter a URL: ${normal}" -i "http://localhost:8080" URL
	#URL=${url:-"http://localhost:8080"}

	available_methods=(GET POST PUT DELETE)
	
	PS3="${red}Choose a method: ${normal}"
	select opt in GET POST PUT DELETE
	do
		if [[ " ${available_methods[@]} " =~ " $opt " ]]; then
			METHOD="$opt"
			break
		else
			echo "Invalid option $REPLY"
		fi
	done
	[ -z "$METHOD" ] && return

	# INDEX, URL, METHOD, BODY, HEADERS
	newTab="${#tabs[@]}℗${URL}℗${METHOD}℗℗℗application/octet-stream"

	tabs+=("$newTab")

	PS3=''
	echo

	currenttab=$(($currenttab+1))

	printtabs
}

printtabs() {
	echo Tabs: 

	function join { local IFS="$1"; shift; echo "$*"; }
	foo=$(printf "$(join , ${tabs[*]})" | sed -e 's/,/\n/g')

	foo="INDEX℗URL℗METHOD℗BODY℗HEADERS℗CONTENT-TYPE\n$foo"

	printf "$foo" | column -t -s'℗' | awk "{f=0} /^$(($currenttab))/ { print \"${green}\"\$0\"${normal}\"; f=1 } f==0 { print \$0 }"
}


printcurrent() {
	foo=$(IFS="\n" ; echo "${tabs[$currenttab]}")
	foo="INDEX℗URL℗METHOD℗BODY℗HEADERS℗CONTENT-TYPE\n$foo"

	#echo -e $foo | column -t -s'℗'
	printf "$foo" | column -t -s'℗' | awk "{f=0} /^$(($currenttab))/ { print \"${green}\"\$0\"${normal}\"; f=1 } f==0 { print \$0 }"
}

main() {
	if [ -d "/tmp" ]; then
		datapath="/tmp"
	else
		echo "/tmp not found. Falling back to .cache"
		mkdir -p $HOME/.cache/postbash
		datapath="$HOME/.cache/postbash"
	fi

	setupcolors

	printbanner

	currenttab=-1

	createtab

	echo

	while :; do
		PS3="${cyan}Please enter your choice: ${normal}"
		options=("Run" "Print current" "Print tabs" "Change URL" "Change method" "Change body" "Change headers" "Change Content-Type" "Create tab" "Previous tab" "Next tab" "Exit")
		select opt in "${options[@]}"
		do
			PS3=''
			case $opt in
				"Run")
					curr="${tabs[$currenttab]}"
					if [ "" = "POST" ]; then
						curl_args="-H \"Content-Type: "
					else
						curl_args="-H \"accept: "
					fi
					curl_args="$curl_args $(printf "$curr" | awk -F'℗' '{ print $6 }')\""
					if [ -e "$datapath/postbash_$currenttab.bodydata" ]; then
						curl_args="${curl_args} --data-binary \"@/tmp/postbash_$currenttab.bodydata\""
					fi

					if [ "$COLORS_SUPPORTED" -eq 1 ]; then
						curl --no-progress-meter -gX `printf "$curr" | awk -F"℗" '{ print \$3 }'` `printf "$curr" | awk -F"℗" '{ print \$2 }'` | pygmentize
					else
						curl --no-progress-meter -gX `printf "$curr" | awk -F"℗" '{ print \$3 }'` `printf "$curr" | awk -F"℗" '{ print \$2 }'`
					fi
					;; 
				"Print current")
					printcurrent
					;;
				"Print tabs")
					printtabs
					;;
				"Change URL")
					URL=`printf "${tabs[$currenttab]}" | awk -F'℗' '{ print $2 }'`
					read -e -p "${red}Enter a new URL: $normal" -i "$URL" NEWURL
					if ! [ -z "$URL" ]; then
						URL="$NEWURL"
					fi
					
					newTab="$(printf "${tabs[$currenttab]}" | awk -F'℗' "gsub(/.*/, \"$URL\", \$2)" OFS='℗')"
					echo "URL changed."
					tabs[$currenttab]="$newTab"

					printcurrent

					;;
				"Change method")
					PS3="${red}Choose a new method: $normal"
					select opt in GET POST PUT DELETE
					do
						if [[ " ${available_methods[@]} " =~ " $opt " ]]; then
							METHOD="$opt"
							break
						else
							echo "Invalid option $REPLY"
						fi
					done
					[ -z "$METHOD" ] && return
					
					newTab="$(printf "${tabs[$currenttab]}" | awk -F'℗' "gsub(/.*/, \"$METHOD\", \$3)" OFS='℗')"
					echo "Method changed."
					tabs[$currenttab]="$newTab"

					printcurrent

					;;
				"Change body")
					PS3="${red}Choose an option: $normal"

					available_options=("Data from stdin" "Data from file")
					select opt in "Data from stdin" "Data from file"
					do
						if [[ " ${available_options[@]} " =~ " $opt " ]]; then
							READMETHOD="$opt"
							break
						else
							echo "Invalid option $REPLY"
						fi
					done

					PS3=""

					case "$READMETHOD" in
						"Data from stdin")
							echo > $datapath/postbash_$currenttab.bodydata
							while read line; do
								echo "$line" > $datapath/postbash_$currenttab.bodydata
							done
							;;
						"Data from file")
							read -p "${red}File path: $normal" filepath
							if [ -e "$filepath" ] && ! [ -d "$filepath" ]; then
								cp "$filepath" $datapath/postbash_$currenttab.bodydata
							else
								echo "Invalid file provided, either it doesn't exist or is a directory."
							fi
							;;
						*)
							printf "An error occured. Quitting."
							exit 1
							;;
					esac

					printcurrent

					;;
				"Change headers")
					;;
				"Change Content-Type")
					CONTENTTYPE=`printf "${tabs[$currenttab]}" | awk -F'℗' '{ print $6 }'`
					read -e -p "${red}Enter a new Content-Type: $normal" -i $CONTENTTYPE NEWCONTENTTYPE
					if ! [ -z "$CONTENTTYPE" ]; then
						URL="$NEWCONTENTTYPE"
					fi
					
					newTab="$(printf "${tabs[$currenttab]}" | awk -F'℗' "gsub(/.*/, \"$URL\", \$6)" OFS='℗')"
					echo "Content-Type changed."
					tabs[$currenttab]="$newTab"

					printcurrent

					;;
				"Create tab")
					createtab
					;;
				"Delete current tab")
					if [ "${#tabs[@]}" -eq 0 ]; then
						break
					else
						unset "tabs[$currenttab]"
					fi

					printtabs

					;;
				"Previous tab")
					if [ "$currenttab" -eq "0" ]; then
						echo "Already on the first tab!"
					else
						currenttab="$(($currenttab - 1))"
					fi
					printtabs
					;;
				"Next tab")
					if [ "$currenttab" -eq "$((${#tabs[@]}-1))" ]; then
						echo "Already on the last tab!"
					else
						currenttab="$(($currenttab + 1))"
					fi
					printtabs
					;;
				"Exit")
					exit 0
					;;
				*) echo "Invalid option $REPLY";;
			esac
			REPLY=""
			echo
			PS3="${cyan}Please enter your choice: ${normal}"
		done

		sleep 1
	done

}

## PROGRAM START

main

